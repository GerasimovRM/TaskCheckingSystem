version: '3.8'

services:
  backend:
    build: ./backend
    command: uvicorn api.server:app --host 0.0.0.0 --reload
    volumes:
      - ./backend:/code
    env_file:
      - .env
    environment:
      - DEBUG=1
    ports:
      - "${BACKEND_PORT}:8000"
    restart: on-failure
    networks:
      - redis-go-net
      - rabbitmq-go-net
      - backend-frontend

  rabbitmq:
    image: rabbitmq:3.5
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - ${RABBITMQ_PORT}:5672
      - ${RABBITMQ_PORT_ADD}:15672
    volumes:
      - D:/Volumes/TCS/rabbitmq/data:/var/lib/rabbitmq/mnesia
      - D:/Volumes/TCS/rabbitmq/log:/var/log/rabbitmq
    networks:
      - rabbitmq-go-net

  redis:
    image: redis:7.0.4-alpine
    command: --requirepass ${REDIS_PASSWORD}
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - D:/Volumes/TCS/redis:/data
    networks:
      - redis-go-net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    # Windows bug with WSL 2: https://github.com/microsoft/WSL/issues/4739#issue-534049240
    # ==========
    environment:
      - WATCHPACK_POLLING=true
    # ==========
    env_file:
      - .env
    ports:
      - 3000:3000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - backend-frontend
      - frontend-services
    tty: true
    stdin_open: true

  auth:
    build:
      context: ./auth-frontend
      dockerfile: Dockerfile.dev
    # Windows bug with WSL 2: https://github.com/microsoft/WSL/issues/4739#issue-534049240
    # ==========
    environment:
      - WATCHPACK_POLLING=true
    # ==========
    ports:
      - 3340:3340
    volumes:
      - ./auth-frontend:/app
      - /app/node_modules
    networks:
      - frontend-services
    stdin_open: true

  chat:
    build:
      context: ./chat-frontend
      dockerfile: Dockerfile.dev
    # Windows bug with WSL 2: https://github.com/microsoft/WSL/issues/4739#issue-534049240
    # ==========
    environment:
      - WATCHPACK_POLLING=true
    # ==========
    ports:
      - 3341:3341
    volumes:
      - ./chat-frontend:/app
      - /app/node_modules
    networks:
      - frontend-services
    stdin_open: true

  celery-worker:
    build: ./backend
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - redis
    volumes:
      - ./backend:/codes
    command: "celery -A celery_worker.worker worker -l info -Q check-solution-queue -c 1"
    networks:
      - rabbitmq-go-net
      - redis-go-net

  celery-flower:
    image: mher/flower:0.9.7
    command: ["flower", "--broker=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672//", "--port=${CELERY_FLOWER_PORT}"]
    ports:
      - "${CELERY_FLOWER_PORT}:${CELERY_FLOWER_PORT}"
    depends_on:
      - rabbitmq
      - redis
    networks:
      - rabbitmq-go-net
      - redis-go-net




networks:
  backend-frontend:
  rabbitmq-go-net:
  redis-go-net:
  frontend-services:
